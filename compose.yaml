# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:

  reverse-proxy:
    image: traefik:v3.2
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false" # prevents docker contains from being exposed by default
      - "--entryPoints.websecure.address=:443" # identify an entrypoint for HTTPS
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true" # define challenge type as TLS
      - "--certificatesresolvers.myresolver.acme.email=ntumiwa.work@gmail.com" # declare email associated with certificate request
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json" # where to store certificate data
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  server:
    image: adamkadda/ntumiwa-site:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.server.rule=Host(`nadiatumiwa.com`)"
      - "traefik.http.routers.server.entrypoints=websecure" # requests must come through 443
      - "traefik.http.routers.server.tls.certresolver=myresolver" # use myresolver
      - "traefik.http.middlewares.test-http-cache.plugin.httpCache.maxTtl=216000" # 1 hour cache
    volumes:
      - ./static:/static
    deploy:
      mode: replicated
      replicas: 3

volumes:
  letsencrypt:

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

